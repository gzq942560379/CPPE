TranslationUnitDecl 0x7c5b9c8 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x7c5c260 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x7c5bf60 '__int128'
|-TypedefDecl 0x7c5c2d0 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x7c5bf80 'unsigned __int128'
|-TypedefDecl 0x7c5c5d8 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x7c5c3b0 'struct __NSConstantString_tag'
|   `-Record 0x7c5c328 '__NSConstantString_tag'
|-TypedefDecl 0x7c5c670 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x7c5c630 'char *'
|   `-BuiltinType 0x7c5ba60 'char'
|-TypedefDecl 0x7c5c968 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x7c5c910 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x7c5c750 'struct __va_list_tag'
|     `-Record 0x7c5c6c8 '__va_list_tag'
|-FunctionDecl 0x7cb9530 <./test/test09.c:1:1, col:16> col:12 GET 'int ()' extern
|-FunctionDecl 0x7cb9700 <line:2:1, col:25> col:15 MALLOC 'void *(int)' extern
| `-ParmVarDecl 0x7cb9630 <col:22> col:25 'int'
|-FunctionDecl 0x7cb9888 <line:3:1, col:24> col:13 FREE 'void (void *)' extern
| `-ParmVarDecl 0x7cb97c0 <col:18, col:23> col:24 'void *'
|-FunctionDecl 0x7cb9a08 <line:4:1, col:22> col:13 used PRINT 'void (int)' extern
| `-ParmVarDecl 0x7cb9948 <col:19> col:22 'int'
`-FunctionDecl 0x7cb9ad8 <line:6:1, line:15:1> line:6:5 main 'int ()'
  `-CompoundStmt 0x7cba0a0 <col:12, line:15:1>
    |-DeclStmt 0x7cb9c18 <line:7:4, col:13>
    | `-VarDecl 0x7cb9b90 <col:4, col:12> col:8 used a 'int' cinit
    |   `-IntegerLiteral 0x7cb9bf8 <col:12> 'int' 0
    |-DeclStmt 0x7cb9cd0 <line:8:4, col:13>
    | `-VarDecl 0x7cb9c48 <col:4, col:12> col:8 used b 'int' cinit
    |   `-IntegerLiteral 0x7cb9cb0 <col:12> 'int' 0
    |-BinaryOperator 0x7cb9d28 <line:9:4, col:8> 'int' '='
    | |-DeclRefExpr 0x7cb9ce8 <col:4> 'int' lvalue Var 0x7cb9b90 'a' 'int'
    | `-IntegerLiteral 0x7cb9d08 <col:8> 'int' 0
    |-ForStmt 0x7cb9fa8 <line:11:4, line:13:4>
    | |-BinaryOperator 0x7cb9d88 <line:11:9, col:13> 'int' '='
    | | |-DeclRefExpr 0x7cb9d48 <col:9> 'int' lvalue Var 0x7cb9b90 'a' 'int'
    | | `-IntegerLiteral 0x7cb9d68 <col:13> 'int' 0
    | |-<<<NULL>>>
    | |-BinaryOperator 0x7cb9e00 <col:16, col:20> 'int' '<'
    | | |-ImplicitCastExpr 0x7cb9de8 <col:16> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x7cb9da8 <col:16> 'int' lvalue Var 0x7cb9b90 'a' 'int'
    | | `-IntegerLiteral 0x7cb9dc8 <col:20> 'int' 10
    | |-BinaryOperator 0x7cb9eb8 <col:24, col:32> 'int' '='
    | | |-DeclRefExpr 0x7cb9e20 <col:24> 'int' lvalue Var 0x7cb9b90 'a' 'int'
    | | `-BinaryOperator 0x7cb9e98 <col:28, col:32> 'int' '+'
    | |   |-ImplicitCastExpr 0x7cb9e80 <col:28> 'int' <LValueToRValue>
    | |   | `-DeclRefExpr 0x7cb9e40 <col:28> 'int' lvalue Var 0x7cb9b90 'a' 'int'
    | |   `-IntegerLiteral 0x7cb9e60 <col:32> 'int' 1
    | `-CompoundStmt 0x7cb9f90 <col:35, line:13:4>
    |   `-BinaryOperator 0x7cb9f70 <line:12:7, col:15> 'int' '='
    |     |-DeclRefExpr 0x7cb9ed8 <col:7> 'int' lvalue Var 0x7cb9c48 'b' 'int'
    |     `-BinaryOperator 0x7cb9f50 <col:11, col:15> 'int' '+'
    |       |-ImplicitCastExpr 0x7cb9f38 <col:11> 'int' <LValueToRValue>
    |       | `-DeclRefExpr 0x7cb9ef8 <col:11> 'int' lvalue Var 0x7cb9c48 'b' 'int'
    |       `-IntegerLiteral 0x7cb9f18 <col:15> 'int' 2
    `-CallExpr 0x7cba060 <line:14:4, col:11> 'void'
      |-ImplicitCastExpr 0x7cba048 <col:4> 'void (*)(int)' <FunctionToPointerDecay>
      | `-DeclRefExpr 0x7cb9fe0 <col:4> 'void (int)' Function 0x7cb9a08 'PRINT' 'void (int)'
      `-ImplicitCastExpr 0x7cba088 <col:10> 'int' <LValueToRValue>
        `-DeclRefExpr 0x7cba000 <col:10> 'int' lvalue Var 0x7cb9c48 'b' 'int'
